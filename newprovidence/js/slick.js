
//# sourceMappingURL=data:application/json;charset=utf8;base64,{"version":3,"sources":["slick.js"],"names":[],"mappings":"","file":"slick.js","sourcesContent":["/*!\n* slick.js\n* v1.0.1 - 2013-12-20\n* https://github.com/shashankmehta/slick.js\n* (c) Shashank Mehta; MIT License\n*/\n/*global jQuery */\n(function ($, root) {\n    'use strict';\n\n    $.fn.exists = function () {\n        return this.length !== 0;\n    };\n\n    var Slick = function (container, config) {\n        this.options = {\n            source: undefined,\n            start: undefined,\n            end: undefined,\n            keyControl: true,\n            content: undefined,\n            theme: {\n                container: container,\n                content: '.slick-content',\n                currentNo: '.current-no',\n                totalNo: '.total',\n                next: '.next',\n                prev: '.prev',\n            }\n        };\n\n        for (var option in this.options) {\n            if (this.options.hasOwnProperty(option) && option !== 'theme') {\n                this.options[option] = config[option] !== undefined ? config[option] : this.options[option];\n            }\n        }\n\n        if(config.theme !== undefined){\n            for (var val in this.options.theme) {\n                if (this.options.theme.hasOwnProperty(val)) {\n                    this.options.theme[val] = config.theme[val] !== undefined ? config.theme[val] : this.options.theme[val];\n                }\n            }\n        }\n\n        this.options.content = this.options.theme.container + ' ' + this.options.theme.content;\n\n        this.state = {\n            // Stores slide url no that is visible\n            current: this.options.start-1,\n            \n            start: this.options.start,\n            end: this.options.end,\n\n            // Stores values that is shown in controls\n            slide: {\n                current: 0,\n                difference: (this.options.start - 1),\n                total: (this.options.end - this.options.start + 1),\n                maxHit: 0\n            }\n        };\n        \n        this.init.apply(this);\n    };\n\n    var SlickProto = Slick.prototype;\n\n    SlickProto.hooks = {\n\n        // Main function for handling next/forwarding of slides\n        next: function() {\n            var slick = this;\n\n            if(slick.state.slide.current < slick.state.slide.total){\n                var step = ++slick.state.slide.current + slick.state.slide.difference;\n                slick.hooks.setSlide.apply(this, [step]);\n            }\n        },\n\n        // Main function for handling going backward\n        prev: function(){\n            var slick = this;\n\n            if(slick.state.slide.current > 1){\n                var step = --slick.state.slide.current + slick.state.slide.difference;\n                slick.hooks.setSlide.apply(this, [step]);\n            }\n        },\n\n        setSlide: function(step){\n            var slick = this;\n            var slideStatus = slick.hooks.slideStatus.apply(slick, [step]);\n            slick.state.slide.current = step - slick.state.slide.difference;\n\n            if(slick.state.slide.current === 1){\n                $(slick.options.theme.container).animate({'opacity': '1'}, 500);\n            }\n\n            if($(slick.options.theme.container + ' .skip' + slick.options.theme.currentNo).is(':input')){\n                $(slick.options.theme.container + ' ' + slick.options.theme.currentNo).val(slick.state.slide.current);\n            }\n            else {\n                $(slick.options.theme.container + ' .skip').val(slick.state.slide.current);\n                $(slick.options.theme.container + ' ' + slick.options.theme.currentNo).html(slick.state.slide.current);\n            }\n\n            \n            if(slideStatus === 1){\n                $(slick.options.content + ' img.current').removeClass('current').addClass('cached-slide').hide();\n                $(slick.options.content + ' img[data-slide=' + step + ']').removeClass('cached-slide').addClass('current').show();\n                slick.state.current = step;\n                $(slick.options.theme.container + ' .length').width(100 * slick.state.slide.current / slick.state.slide.total + '%');\n                slick.hooks.getSlide.apply(slick, [step+1]);\n                return;\n            }\n            else if(slideStatus === 2){\n                slick.hooks.slideSwitch.apply(this, [step]);\n            }\n            else if(slideStatus === 0){\n                // Removing on load from all previous still loading images \n                $(slick.options.content + ' img.loading').off('load.slideSwitch').remove();\n                slick.hooks.getSlide.apply(slick, [step]);\n                slick.hooks.slideSwitch.apply(this, [step]);\n            }\n        },\n\n        // Gets the slide for the step\n        getSlide: function(step){\n            var slick = this;\n            if(slick.hooks.slideStatus.apply(this, [step]) === 0 && step <= slick.state.end){\n                $(slick.options.content).append('<img src=\"'+ slick.hooks.imagePath.apply(slick, [step]) +'\" data-slide=' + step + ' class=\"loading\">');\n                $(slick.options.content + ' img.loading').hide();\n                $(slick.options.content + ' img.loading').load(function(){\n                    $(this).removeClass('loading').addClass('cached-slide');\n                });\n            }\n        },\n\n        slideSwitch: function(step){\n            var slick = this;\n            $(slick.options.content + ' img[data-slide=' + step + ']').on('load.slideSwitch', function(){\n                $(slick.options.content + ' img.current').removeClass('current').addClass('cached-slide').hide();\n                $(this).removeClass('cached-slide').addClass('current').show();\n                slick.state.current = step;\n                $(slick.options.theme.container + ' .length').width(100 * (step + 1) / slick.state.slide.total + '%');\n                slick.hooks.getSlide.apply(slick, [step+1]);\n            });\n        },\n\n        // Returns the status of a slide\n        // 0: Not requested yet\n        // 1: cached\n        // 2: loading\n        slideStatus: function(step){\n            var slick = this;\n            var el = slick.options.content + ' img[data-slide=' + step + ']';\n            if($(el).exists()){\n                if($(el).hasClass('loading')){\n                    return 2;\n                }\n                else {\n                    return 1;\n                }\n            }\n            else {\n                return 0;\n            }\n        },\n\n        // Returns the path with the current no inserted\n        imagePath: function(step){\n            var parts = this.options.source.split('*');\n            return parts[0] + step + parts[1];\n        },\n\n        skip: function(val){\n            if($.isNumeric(val)){\n                var slick = this;\n\n                var step = parseInt(val) + slick.state.slide.difference;\n                slick.hooks.getSlide.apply(slick, [step]);\n                slick.hooks.setSlide.apply(slick, [step]);\n            }\n        }\n\n    };\n\n    SlickProto.init = function(){\n        var slick = this;\n\n        $(slick.options.theme.container).css('opacity', '0');\n\n        // Sets the first slide\n        if(typeof slick.options.source === 'string'){\n            slick.hooks.next.apply(slick);\n        }\n\n        // Attaches event listeners for next/prev buttons\n        $(slick.options.theme.container + ' ' + slick.options.theme.next).click(function(e){\n            e.preventDefault();\n            slick.hooks.next.apply(slick);\n        });\n        $(slick.options.theme.container + ' ' + slick.options.theme.prev).click(function(e){\n            e.preventDefault();\n            slick.hooks.prev.apply(slick);\n        });\n        $(slick.options.theme.container + ' ' + slick.options.theme.totalNo).html(slick.state.end - slick.state.start + 1);\n\n        // Ataches keyboard control\n        if(slick.options.keyControl){\n            $(document).keyup(function(e) {\n                if ((e.keyCode ===  39) && !$('input:focus').exists()) {\n                    slick.hooks.next.apply(slick);\n                }\n                if ((e.keyCode ===  37) && !$('input:focus').exists()) {\n                    slick.hooks.prev.apply(slick);\n                }\n            });\n        }\n        \n        $(slick.options.theme.container + ' .skip').keypress(function(e){\n            if(e.keyCode === 13){\n                slick.hooks.skip.apply(slick, [$(this).val()]);\n                $(this).blur();\n            }\n        });\n    };\n\n    window.Slick = Slick;\n\n    // Exposing programmatic access\n    Slick.next = function(slick){\n        if(slick.constructor === Slick){\n            slick.hooks.next.apply(slick);\n        }\n    };\n\n    Slick.prev = function(slick){\n        if(slick.constructor === Slick){\n            slick.hooks.prev.apply(slick);\n        }\n    };\n\n    Slick.skip = function(slick, step){\n        if(slick.constructor === Slick){\n            slick.hooks.skip.apply(slick, [step]);\n        }\n    };\n\n}(jQuery, window));"]}
